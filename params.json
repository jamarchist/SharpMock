{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"### What is SharpMock?\r\nSharpMock is an 'isolation framework' for testing .NET code. Its primary focus is on the ability to fake static methods, sealed methods, and constructors - elements that cannot be replaced by simple object-oriented methods. SharpMock is primarily aimed at testing legacy code that contains trouble spots for current free/open source isolation frameworks. SharpMock is also intended to require _only_ .NET 2.0.\r\n\r\n### How does it work?\r\nSharpMock uses [Microsoft's Common Compiler Infrastructure](http://cciast.codeplex.com/) to replace specified method calls to special calls for use in tests. In a sense, it is a specialized AOP framework focused on the task of replacing method calls _at the call site_.\r\n\r\n### What is the current state of the project?\r\nSharpMock is currently in a 'pre-alpha' state. At a minimally-tested level, these features seem to work:\r\n* Replacing static method calls/properties\r\n* Replacing instance method calls/properties (including methods on sealed classes or methods not marked virtual)\r\n* Replacing static field access/assignment\r\n* Replacing instance field access/assignment\r\n* Replacing constructor calls with methods that return an instance of the constructed type\r\n* Replacing calls to mscorlib types\r\n\r\nThis minimal feature set isn't very useful for legacy codebases as-is. Here is a short list of things that **aren't** working:\r\n* Support for out/ref parameters\r\n* Support for generics\r\n* Support for non-public methods\r\n* Support for events\r\n* Support for parallelism\r\n* Comprehensive API for call verification\r\n* Comprehensive API for argument matching\r\n* ... a million other things ...\r\n\r\n### What does the code for something that **does** work look like?\r\n\r\n```\r\n        [Test]\r\n        public void Example()\r\n        {\r\n            Replace.CallsTo(() => StaticClass.StringReturnNoParameters()).With(() => \"Interception Result\");\r\n\r\n            var code = new CodeUnderTest();\r\n            var result = code.CallsStringReturnNoParameters();\r\n\r\n            Assert.AreEqual(\"Interception Result\", result);\r\n        }\r\n```\r\nwhere the code under test looks like this:\r\n```\r\n        public string CallsStringReturnNoParameters()\r\n        {\r\n            return StaticClass.StringReturnNoParameters();\r\n        }\r\n```\r\nand the static method looks like this\r\n```\r\n        public static string StringReturnNoParameters()\r\n        {\r\n            return \"some value\";\r\n        }\r\n```\r\n\r\n### How do I try it out?\r\nI intend to fill in this section in more detail soon. Until then, [drop me a line](mailto:jamesryangray@gmail.com).","name":"SharpMock","tagline":"If it moves, mock it."}